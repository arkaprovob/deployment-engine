kind: "Template"
apiVersion: "v1"
metadata:
  name: "environment-template"
labels:
  template: "environment-template"
parameters:
  - name: "ENV"
    description: "Environment of the website"
    required: true
  - name: "WEBSITE"
    description: "Name of website"
    required: true
  - name: "WEBSITE_VERSION"
    description: "Version of website"
    required: true
  - name: "TRACE_ID"
    description: "tracing UUID from operator during creation"
    required: true
  - name: "IMAGE_HTTPD"
    value: "quay.io/spaship/httpd"
    required: false
  - name: "IMAGE_API"
    value: "quay.io/spaship/content-git-api"
    required: false
  - name: "IMAGE_HTTPD_VERSION"
    value: "1.3.6"
    required: false
  - name: "IMAGE_API_VERSION"
    value: "1.3.6"
    required: false
objects:
  - kind: Service
    apiVersion: v1
    metadata:
      name: svc-${WEBSITE}-${ENV}
      labels:
        website: ${WEBSITE}
        managedBy: spaship
        environment: ${ENV}
        tracing: ${TRACE_ID}
        websiteVersion: ${WEBSITE_VERSION}
    spec:
      #      type: NodePort
      ports:
        # Expose main container
        - port: 80
          targetPort: 8080
          name: http
        # Expose rest api
        - port: 8090
          name: http-api
      selector:
        managedBy: spaship
        website: ${WEBSITE}
        environment: ${ENV}
        websiteVersion: ${WEBSITE_VERSION}
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: ${WEBSITE}-${ENV}
      website: ${WEBSITE}
      labels:
        website: ${WEBSITE}
        managedBy: spaship
        environment: ${ENV}
        tracing: ${TRACE_ID}
        websiteVersion: ${WEBSITE_VERSION}
    spec:
      selector:
        matchLabels:
          managedBy: spaship
          website: ${WEBSITE}
          environment: ${ENV}
      replicas: 2
      template:
        metadata:
          labels:
            website: ${WEBSITE}
            managedBy: spaship
            environment: ${ENV}
            tracing: ${TRACE_ID}
            websiteVersion: ${WEBSITE_VERSION}
        spec:
          containers:
            # Main container to serve data
            - name: httpd-spaship-operator
              image: "${IMAGE_HTTPD}:${IMAGE_HTTPD_VERSION}"
              imagePullPolicy: IfNotPresent
              resources:
                requests:
                  cpu: 50m
                  memory: 100Mi
                limits:
                  cpu: 500m
                  memory: 250Mi
              ports:
                - containerPort: 8080
              volumeMounts:
                - mountPath: "/var/www/html/"
                  name: data
                  subpath: html
            - name: api-spaship-operator
              image: "${IMAGE_API}:${IMAGE_API_VERSION}"
              imagePullPolicy: IfNotPresent     # Always / IfNotPresent
              livenessProbe:
                httpGet:
                  path: "/"
                  port: 8090
                initialDelaySeconds: 2
                failureThreshold: 10
                periodSeconds: 10
              readinessProbe:
                httpGet:
                  path: "/"
                  port: 8090
                initialDelaySeconds: 2
                failureThreshold: 5
                periodSeconds: 10
              resources:
                requests:
                  cpu: 10m
                  memory: 50Mi
                limits:
                  cpu: 100m
                  memory: 100Mi
              ports:
                - containerPort: 8090
              env:
                - name: APP_DATA_DIR
                  value: "/app/data/"
              volumeMounts:
                - mountPath: "/app/data/"
                  name: data
                  subpath: data
          volumes:
            - name: data
              emptyDir: { }